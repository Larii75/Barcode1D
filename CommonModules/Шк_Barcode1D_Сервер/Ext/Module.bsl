///Copyright (c) 2021, https://github.com/Larii75 Linchenko Andrii
///
///Разрешается повторное распространение и использование как в виде исходного кода, так и в двоичной форме, с изменениями или без, при соблюдении следующих условий:
///
///При повторном распространении исходного кода должно оставаться указанное выше уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
///При повторном распространении двоичного кода должна сохраняться указанная выше информация об авторском праве, этот список условий и последующий отказ от гарантий 
///в документации и/или в других материалах, поставляемых при распространении. 
///Ни название <Организации>, ни имена её сотрудников не могут быть использованы в качестве поддержки или продвижения продуктов, основанных на этом ПО без предварительного письменного разрешения.
///ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ» БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, 
///ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. 
///НИ В КОЕМ СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ,
///ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ 
///(ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ, ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, 
///ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.
///
///Copyright (c) 2021, https://github.com/Larii75 Linchenko Andrii All rights reserved.
///
///Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
///
///Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
///Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
///Neither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
///THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
///THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER 
///OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
///PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
///LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
///EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Функция - Новый штрихкод 1D
// 
// Возвращаемое значение:
//   - 
//
Функция НовыйШтрихкод1D() Экспорт

	Штрихкод1D = Новый Структура;
	Штрихкод1D.Вставить("СтрокаККодировке", "");
	Штрихкод1D.Вставить("ТипШтрихкода", 4);
	Штрихкод1D.Вставить("ВыводитьРамку", Ложь);
	Штрихкод1D.Вставить("Поворот", Ложь);
	Штрихкод1D.Вставить("ВысотаШтрихкодаПикс", Неопределено);
	Штрихкод1D.Вставить("Шрифт", Неопределено);
	Штрихкод1D.Вставить("ЦветШтрихкода", Неопределено);
	Штрихкод1D.Вставить("ЦветСимволовТекста", Неопределено);
	Штрихкод1D.Вставить("ПоложениеТекстаПоВертикали", Неопределено);
	Штрихкод1D.Вставить("ПоложениеТекстаПоГоризонтали", Неопределено);
	Штрихкод1D.Вставить("Трекинг", Неопределено);
	Штрихкод1D.Вставить("ВыводитьТекст", Истина);
	
	Возврат Штрихкод1D;
	
КонецФункции // Штрихкод1D()

// Функция - Сформировать SVG
//
// Параметры:
//  СтрокаККодировке			 - 	 - 
//  ТипШтрихкода				 - 	 - 
//  ВыводитьРамку				 - 	 - 
//  Поворот						 - 	 - 
//  Шрифт						 - 	 - 
//  ЦветШтрихкода				 - 	 - 
//  ЦветСимволовТекста			 - 	 - 
//  ПоложениеТекстаПоВертикали	 - 	 - 
//  ПоложениеТекстаПоГоризонтали - 	 - 
//  Трекинг						 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция СформироватьSVG(Штрихкод1D) Экспорт
	
	СтрокаККодировке = Штрихкод1D.СтрокаККодировке;
	ТипШтрихкода = Штрихкод1D.ТипШтрихкода;
	ВыводитьРамку = Штрихкод1D.ВыводитьРамку;
	Поворот = Штрихкод1D.Поворот;
	ВысотаШтрихкодаПикс = Штрихкод1D.ВысотаШтрихкодаПикс;
	Шрифт = Штрихкод1D.Шрифт;
	ЦветШтрихкода = Штрихкод1D.ЦветШтрихкода;
	ЦветСимволовТекста = Штрихкод1D.ЦветСимволовТекста;
	ПоложениеТекстаПоВертикали = Штрихкод1D.ПоложениеТекстаПоВертикали;
	ПоложениеТекстаПоГоризонтали = Штрихкод1D.ПоложениеТекстаПоГоризонтали;
	Трекинг = Штрихкод1D.Трекинг;
	ВыводитьТекст = Штрихкод1D.ВыводитьТекст;

	Если ТипЗнч(ТипШтрихкода) = Тип("Число") Тогда
		СоответствиеТиповШтрихкода = Шк_Barcode1D_СерверПовтИсп.ПолучитьСоответствиеТипКодаПоЧисловомуЗначению();
		Если НЕ СоответствиеТиповШтрихкода[ТипШтрихкода] = Неопределено Тогда
			ТипШтрихкода = СоответствиеТиповШтрихкода[ТипШтрихкода];
		Иначе
			ВызватьИсключение("ТипШтрихкода не поддерживается!");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипШтрихкода = "CODE16K" ИЛИ ТипШтрихкода = "PDF417" 
		ИЛИ ТипШтрихкода = "CODE93FullASCII" ИЛИ ТипШтрихкода = "RSS14" Тогда
		ВызватьИсключение("ТипШтрихкода пока не поддерживается!");
	КонецЕсли;
	
	Если ТипШтрихкода = "EAN13" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{12}");
	ИначеЕсли ТипШтрихкода = "EAN13AddOn2" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{14}");
	ИначеЕсли ТипШтрихкода = "EAN13AddOn5" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{17}");
	ИначеЕсли ТипШтрихкода = "EAN8" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{7}");
	ИначеЕсли ТипШтрихкода = "PHARMACODE" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{1,6}");
		Если ПроверкаКода Тогда
			ПроверкаКода = Число(СтрокаККодировке) <= 131070;
		КонецЕсли;
	ИначеЕсли ТипШтрихкода = "MSI" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{1,39}");
	ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9ABCD\-\.\+:$]{1,48}");
	ИначеЕсли ТипШтрихкода = "ITF14" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{13}");
	ИначеЕсли ТипШтрихкода = "CODE11" Тогда
		СтрокаККодировке = СокрЛП(ВРЕГ(СтрокаККодировке));
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9\-]{1,48}");
	ИначеЕсли ТипШтрихкода = "CODE39" Тогда
		СтрокаККодировке = СокрЛП(ВРЕГ(СтрокаККодировке));
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9A-Z\-\.\+%$ /]{1,48}");
	ИначеЕсли ТипШтрихкода = "CODE39FullASCII" Тогда
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[&#013;&#009;-&#010;&#032;-&#127;]{1,48}");
	ИначеЕсли ТипШтрихкода = "CODE93" Тогда
		СтрокаККодировке = СокрЛП(ВРЕГ(СтрокаККодировке));
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9A-Z\-\.\+%$ /]{1,80}");
	ИначеЕсли ТипШтрихкода = "EAN128" Тогда
		///К сожалению 1С не понимает якорь ^
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "(\(\d{2,3}[yn\d]?\)[&#013;&#009;-&#010;&#032;-&#127;]{1,48})+");
		Если ПроверкаКода Тогда
			ПроверкаКода = РасширеннаяПроверкаКодаEAN128(СтрокаККодировке);	
		КонецЕсли;
	ИначеЕсли ТипШтрихкода = "CODE128" Тогда
		///Сложнее регулярок - регулярки с HTML мнемониками и 1C ограничениями
		///исключение XmlCharRef в DOMДокумент и/или СоздатьФабрикуXDTO
		///если кто знает как в pattern xsd в 1C упомянуть символы #000 - #008 
		///и на основании этой xsd создать ФабрикуXDTO, позвоните мне...
		///В https://www.w3.org/MarkUp/html-spec/html-spec_13.html
		///REFERENCE       DESCRIPTION
		///--------------  -----------
		///&#00; - &#08;   Unused
		///&#11; - &#12;   Unused
		///&#14; - &#31;   Unused
		///&#127; - &#159; Unused
		///Если смотреть со стороны xsd, например https://www.w3.org/XML/2008/03/xsdl-regex/re.xml
		///то 1С напрочь не понимает варианты типа [#x5B#x5D] и POSIX [\p{L}], но понимает типа &#x10FFFF 
		///и не понимает &#x0000;-&#x0008; и &#000;-&#008;
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[&#013;&#009;-&#010;&#032;-&#127;&#200;-&#211;]{1,55}");
	ИначеЕсли ТипШтрихкода = "CODE2OF5" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{2,80}");
		Если НЕ СтрДлина(СтрокаККодировке) = 0 И НЕ СтрДлина(СтрокаККодировке)%2 = 0 И ПроверкаКода Тогда
			СтрокаККодировке = "0" + СтрокаККодировке;
		КонецЕсли;
	ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
		СтрокаККодировке = СокрЛП(СтрокаККодировке);
		ПроверкаКода = Шк_Barcode1D_КлиентСервер.RegExТест(СтрокаККодировке, "[0-9]{1,48}");
	КонецЕсли;
	
	Если ПроверкаКода Тогда
		ШтрихКод = СтрокаККодировке;
		ДвоичныйКод = ПреобразоватьСимволыВДвоичныйКодШтрихкода(ТипШтрихкода, Штрихкод);	
	Иначе
		ДвоичныйКод = "0";
		ШтрихКод = "error"; 
	КонецЕсли;
	СтруктураПараметровПоУмолчанию = Шк_Barcode1D_СерверПовтИсп.ПолучитьПараметрыШтрихкодаПоУмолчанию(ТипШтрихкода);
	Шрифт = ?(Шрифт<>Неопределено, Шрифт, СтруктураПараметровПоУмолчанию.Шрифт);
	ЦветШтрихкода = ?(ЦветШтрихкода<>Неопределено, ЦветШтрихкода, СтруктураПараметровПоУмолчанию.ЦветШтрихкода);
	ЦветСимволовТекста = ?(ЦветСимволовТекста<>Неопределено, ЦветСимволовТекста, СтруктураПараметровПоУмолчанию.ЦветСимволовТекста);
	ПоложениеТекстаПоВертикали = ?(ПоложениеТекстаПоВертикали<>Неопределено, ПоложениеТекстаПоВертикали, СтруктураПараметровПоУмолчанию.ПоложениеТекстаПоВертикали);
	ПоложениеТекстаПоГоризонтали = ?(ПоложениеТекстаПоГоризонтали<>Неопределено, ПоложениеТекстаПоГоризонтали, СтруктураПараметровПоУмолчанию.ПоложениеТекстаПоГоризонтали);
	Трекинг = ?(Трекинг<>Неопределено, Трекинг, СтруктураПараметровПоУмолчанию.Трекинг);
	
	Если ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
		РезультатФункции = СформироватьКартинкуSVG(ТипШтрихкода, ДвоичныйКод, Поворот, ВыводитьРамку, ВысотаШтрихкодаПикс, ЦветШтрихкода, ЦветСимволовТекста, ПоложениеТекстаПоВертикали, ПоложениеТекстаПоГоризонтали, Трекинг, Шрифт, ?(ВыводитьТекст, ?(ШтрихКод="error", ШтрихКод, СтрокаККодировке), ""));
	Иначе	
		РезультатФункции = СформироватьКартинкуSVG(ТипШтрихкода, ДвоичныйКод, Поворот, ВыводитьРамку, ВысотаШтрихкодаПикс, ЦветШтрихкода, ЦветСимволовТекста, ПоложениеТекстаПоВертикали, ПоложениеТекстаПоГоризонтали, Трекинг, Шрифт, ?(ВыводитьТекст, Штрихкод, ""));
	КонецЕсли;
	
	Возврат РезультатФункции;
		
КонецФункции // СформироватьSVGНаСервере()

// Функция - Преобразовать символы в двоичный код штрихкода
//
// Параметры:
//  СтрокаСимволов	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПреобразоватьСимволыВДвоичныйКодШтрихкода(ЗНАЧ ТипШтрихкода, СтрокаСимволовШтрихкода)
		
	ОбщееКоличествоСимволовШК = 0;
	КоличествоМодулейВБлоке = 0;
	НачальныйСимволДляИтерации = 0;
	КорректорИтерации = 0;
	СинхронизацияНачало = "";
	СинхронизацияСередина = "";
	СинхронизацияКонец = "";
	БелоеПоле = "0000000000";
	
	Если ТипШтрихкода = "EAN13" Тогда
		Если СтрДлина(СтрокаСимволовШтрихкода) <> 12 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 2;
		ОбщееКоличествоСимволовШК = 13;
		КоличествоМодулейВБлоке = 42;
		КорректорИтерации = 1;
		СинхронизацияНачало = "101";
		СинхронизацияСередина = "01010";
		СинхронизацияКонец = "101";
		КонтролСимвол = КонтрольныйСимволEAN(СтрокаСимволовШтрихкода, ОбщееКоличествоСимволовШК);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовEAN(ТипШтрихкода);
		ПервыйСимвол = Сред(ШтрихКод, 1, 1);
		Формула = ВсеФормулы[ПервыйСимвол];
		КодыСимволов = Шк_Barcode1D_СерверПовтИсп.КодировкаСимволовEAN();
	ИначеЕсли ТипШтрихкода = "EAN13AddOn2" Тогда
		Если СтрДлина(СтрокаСимволовШтрихкода) <> 14 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 2;
		ОбщееКоличествоСимволовШК = 13;
		КоличествоМодулейВБлоке = 42;
		КорректорИтерации = 1;
		СинхронизацияНачало = "101";
		СинхронизацияСередина = "01010";
		СинхронизацияКонец = "101";
		КонтролСимвол = КонтрольныйСимволEAN(СтрокаСимволовШтрихкода, ОбщееКоличествоСимволовШК);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовEAN("EAN13");
		ПервыйСимвол = Сред(ШтрихКод, 1, 1);
		Формула = ВсеФормулы[ПервыйСимвол];
		КодыСимволов = Шк_Barcode1D_СерверПовтИсп.КодировкаСимволовEAN();
	ИначеЕсли ТипШтрихкода = "EAN13AddOn5" Тогда
		Если СтрДлина(СтрокаСимволовШтрихкода) <> 17 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 2;
		ОбщееКоличествоСимволовШК = 13;
		КоличествоМодулейВБлоке = 42;
		КорректорИтерации = 1;
		СинхронизацияНачало = "101";
		СинхронизацияСередина = "01010";
		СинхронизацияКонец = "101";
		КонтролСимвол = КонтрольныйСимволEAN(СтрокаСимволовШтрихкода, ОбщееКоличествоСимволовШК);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовEAN("EAN13");
		ПервыйСимвол = Сред(ШтрихКод, 1, 1);
		Формула = ВсеФормулы[ПервыйСимвол];
		КодыСимволов = Шк_Barcode1D_СерверПовтИсп.КодировкаСимволовEAN();
	ИначеЕсли ТипШтрихкода = "EAN8" Тогда
		Если СтрДлина(СтрокаСимволовШтрихкода) <> 7 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		ОбщееКоличествоСимволовШК = 8;
		КоличествоМодулейВБлоке = 28;
		СинхронизацияНачало = "101";
		СинхронизацияСередина = "01010";
		СинхронизацияКонец = "101";
		КонтролСимвол = КонтрольныйСимволEAN(СтрокаСимволовШтрихкода, ОбщееКоличествоСимволовШК);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовEAN(ТипШтрихкода);
		ПервыйСимвол = Сред(ШтрихКод, 1, 1);
		Формула = ВсеФормулы[ПервыйСимвол];
		КодыСимволов = Шк_Barcode1D_СерверПовтИсп.КодировкаСимволовEAN();
	ИначеЕсли ТипШтрихкода = "CODE11" Тогда
		///Данных по количеству модулей/кодируемых символов не нашел. Поставим 48 символа.
		Если СтрДлина(СтрокаСимволовШтрихкода) > 48 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		СинхронизацияНачало = "101110001";
		СинхронизацияСередина = "";
		СинхронизацияКонец = "101110001" ;
		КонтролСимвол = КонтрольныйСимволКод11(СтрокаСимволовШтрихкода);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ОбщееКоличествоСимволовШК = СтрДлина(ШтрихКод);
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовКод11();
	ИначеЕсли ТипШтрихкода = "CODE39" Тогда
		///Данных по количеству модулей/кодируемых символов не нашел. Поставим 48 символа.
		Если СтрДлина(СтрокаСимволовШтрихкода) > 48 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		ОбщееКоличествоСимволовШК = СтрДлина(СтрокаСимволовШтрихкода);
		СинхронизацияНачало = "100010111011101";
		СинхронизацияСередина = "";
		СинхронизацияКонец = "100010111011101" ;
		//контрольный символ практически не используется. Хотя может вычисляться и дополнять строку. ... TO DO
		///
		///КонтролСимвол = ...
		///
		///Code 39 is sometimes used with an optional modulo 43 check digit. Using it requires this feature to be enabled in the barcode reader. The code with check digit is referred to as Code 39 mod 43.
		///To compute this, each character is assigned a value. The assignments are listed in the table above, and almost, but not quite, systematic.
		///Here is how to do the checksum calculation:
		///Take the value (0 through 42) of each character in the barcode excluding start and stop codes.
		///Sum the values.
		///Divide the result by 43.
		///The remainder is the value of the checksum character to be appended.
		ШтрихКод = СтрокаСимволовШтрихкода;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволов39();
	ИначеЕсли ТипШтрихкода = "CODE39FullASCII" Тогда
		///Данных по количеству модулей/кодируемых символов не нашел. Поставим 48 символа.
		Если СтрДлина(СтрокаСимволовШтрихкода) > 48 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		ОбщееКоличествоСимволовШК = СтрДлина(СтрокаСимволовШтрихкода);
		СинхронизацияНачало = "100010111011101";
		СинхронизацияСередина = "";
		СинхронизацияКонец = "100010111011101" ;
		//контрольный символ практически не используется. Хотя может вычисляться и дополнять строку. ... TO DO
		///
		///КонтролСимвол = ...
		///
		///Code 39 is sometimes used with an optional modulo 43 check digit. Using it requires this feature to be enabled in the barcode reader. The code with check digit is referred to as Code 39 mod 43.
		///To compute this, each character is assigned a value. The assignments are listed in the table above, and almost, but not quite, systematic.
		///Here is how to do the checksum calculation:
		///Take the value (0 through 42) of each character in the barcode excluding start and stop codes.
		///Sum the values.
		///Divide the result by 43.
		///The remainder is the value of the checksum character to be appended.
		ШтрихКод = СтрокаСимволовШтрихкода;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволов39FullASCII();
	ИначеЕсли ТипШтрихкода = "CODE93" Тогда
		///Данных по количеству модулей/кодируемых символов не нашел. Поставим 80 символа.
		Если СтрДлина(СтрокаСимволовШтрихкода) > 80 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		ОбщееКоличествоСимволовШК = СтрДлина(СтрокаСимволовШтрихкода);
		СинхронизацияНачало = "101011110";
		СинхронизацияСередина = "";
		КонтролСимвол = КонтрольныйСимволCode93(СтрокаСимволовШтрихкода);
		СинхронизацияКонец = КонтролСимвол + "101011110" + "1";
		ШтрихКод = СтрокаСимволовШтрихкода;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволов93();
	ИначеЕсли ТипШтрихкода = "CODE128" Тогда
		///Данных по количеству модулей/кодируемых символов не нашел. Поставим 55 символов.
		Если СтрДлина(СтрокаСимволовШтрихкода) > 55 Тогда 
			Возврат "";
		КонецЕсли;	
		НачальныйСимволДляИтерации = 1;	
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовКод128();
		Подтип128Кода = ?(Шк_Barcode1D_КлиентСервер.RegExТест(Сред(СтрокаСимволовШтрихкода, 1, 2), "[0-9]{2}"), "C", ?(Шк_Barcode1D_КлиентСервер.RegExТест(Сред(СтрокаСимволовШтрихкода, 1, 1), "[&#013;&#009;-&#010;]"), "A", "B"));
		ВсеФормулыЛокально = Неопределено;
		ВсеФормулы.Свойство(Подтип128Кода, ВсеФормулыЛокально);
		СимволыСтарт = ВсеФормулыЛокально["START " + Подтип128Кода];
		СинхронизацияНачало = ВсеФормулыЛокально[ВсеФормулыЛокально["START " + Подтип128Кода]];
		СинхронизацияСередина = "";
		СинхронизацияКонец = ВсеФормулыЛокально[206];
		///КС вычисляется в конце.
		ШтрихКод = СтрокаСимволовШтрихкода;
		ОбщееКоличествоСимволовШК = СтрДлина(ШтрихКод)+1;
	ИначеЕсли ТипШтрихкода = "EAN128" Тогда
		НачальныйСимволДляИтерации = 1;	
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовКод128();
		Подтип128Кода = "C"; ///Всегда C
		ВсеФормулыЛокально = Неопределено;
		ВсеФормулы.Свойство(Подтип128Кода, ВсеФормулыЛокально);
		СимволыСтарт = ВсеФормулыЛокально["START " + Подтип128Кода];
		СинхронизацияНачало = ВсеФормулыЛокально[СимволыСтарт];
		СинхронизацияСередина = "";
		СинхронизацияКонец = ВсеФормулыЛокально[206];
		///КС вычисляется в конце.
		ШтрихКодПредв = СтрЗаменить(СтрЗаменить(СтрокаСимволовШтрихкода, ")", ""), "(", Символ(202));
		КартаИндексовИдентификаторов = ВернутьКартуИндексовИдентификаторовGS1(ШтрихКодПредв);
		ШтрихКод = СтрЗаменить(СтрЗаменить(СтрокаСимволовШтрихкода, ")", ""), "(", "");
		ОбщееКоличествоСимволовШК = СтрДлина(ШтрихКод)+1;
	ИначеЕсли ТипШтрихкода = "CODE2OF5" Тогда
		///не читается на 1-2 символах. Доработать!!!
		///Данных по количеству модулей/кодируемых символов не нашел. Поставим 80 символов.
		Если СтрДлина(СтрокаСимволовШтрихкода) > 80 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		ОбщееКоличествоСимволовШК = СтрДлина(СтрокаСимволовШтрихкода);
		СинхронизацияНачало = "1010";
		СинхронизацияСередина = "";
		//контрольный символ почти не используется... TO DO
		///
		///КонтролСимвол = ...
		///
		///A checksum can be added; here is the calculation method :
		///The digits are numbered from right to left, then we compute X the sum of even digits and Y the sum of odd digits.
		///Let's calculate Z = X + 3 * Y
		///Let M the number divisible by 10 immediately superior to Z
		///The checksum is : M - Z
		СинхронизацияКонец = "11101";		
		ШтрихКод = СтрокаСимволовШтрихкода;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиПарСимволов2на5();
	ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
		///не читается на 1-2 символах. Доработать!!!
		///Данных по количеству модулей/кодируемых символов не нашел. Поставим 80 символов.
		Если СтрДлина(СтрокаСимволовШтрихкода) > 48 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		СинхронизацияНачало = "111011101";
		СинхронизацияСередина = "";
		СинхронизацияКонец = "111010111";		
		КонтролСимвол = КонтрольныйСимволUPS(СтрокаСимволовШтрихкода);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ОбщееКоличествоСимволовШК = СтрДлина(Штрихкод);
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовИндустриал2На5();
	ИначеЕсли ТипШтрихкода = "ITF14" Тогда
		Если СтрДлина(СтрокаСимволовШтрихкода)<>13 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		ОбщееКоличествоСимволовШК = 14;
		СинхронизацияНачало = "1010";
		СинхронизацияСередина = "";
		СинхронизацияКонец = "11101";
		КонтролСимвол = КонтрольныйСимволEAN(СтрокаСимволовШтрихкода, ОбщееКоличествоСимволовШК);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиПарСимволов2на5();
	ИначеЕсли ТипШтрихкода = "PHARMACODE" Тогда
		Если Число(СтрокаСимволовШтрихкода) > 131070 Тогда 
			Возврат "";
		КонецЕсли;
		БелоеПоле = "000000000000000000";
		///Ибо число, а не строка
		НачальныйСимволДляИтерации = 1;
		СинхронизацияНачало = "";
		СинхронизацияСередина = "";
		СинхронизацияКонец = "";
		КонтролСимвол = "";
		ШтрихКод = КодировкаЧислаPHARMACODE(Число(СтрокаСимволовШтрихкода));
		ОбщееКоличествоСимволовШК = СтрДлина(ШтрихКод);
	ИначеЕсли ТипШтрихкода = "MSI" Тогда
		Если СтрДлина(СтрокаСимволовШтрихкода)>39 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		СинхронизацияНачало = "110";
		СинхронизацияСередина = "";
		СинхронизацияКонец = "1001";
		КонтролСимвол = АлгоритмЛуна(СтрокаСимволовШтрихкода);
		ШтрихКод = СтрокаСимволовШтрихкода + КонтролСимвол;
		ОбщееКоличествоСимволовШК = СтрДлина(Штрихкод);
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиMSI();
	ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
		Если СтрДлина(СтрокаСимволовШтрихкода)>48 Тогда 
			Возврат "";
		КонецЕсли;
		НачальныйСимволДляИтерации = 1;
		СинхронизацияНачало = "1011100010001"; ///A
		СинхронизацияСередина = "";
		СинхронизацияКонец = "1011100010001"; ///A
		ШтрихКод = СтрокаСимволовШтрихкода;
		ОбщееКоличествоСимволовШК = СтрДлина(Штрихкод);
		ВсеФормулы = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовCodabar();
	КонецЕсли;
	
	Если ТипШтрихкода = "CODE39" ИЛИ ТипШтрихкода = "CODE39FullASCII" ИЛИ ТипШтрихкода = "CODE11" ИЛИ ТипШтрихкода = "CODABAR" ИЛИ ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
		КодДвоичРезультат = "0";	
	Иначе
		КодДвоичРезультат = "";
	КонецЕсли;
	
	СтрокаДляКСКод128 = "";	
	Для Итерация = НачальныйСимволДляИтерации По ОбщееКоличествоСимволовШК Цикл
		Если ТипШтрихкода = "CODE39" ИЛИ ТипШтрихкода = "CODE11" ИЛИ ТипШтрихкода = "CODABAR" ИЛИ ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
			ТекСимвол = Сред(ШтрихКод, Итерация, 1);
			КодСимвола = ВсеФормулы[ТекСимвол];
			КодДвоичРезультат = КодДвоичРезультат + КодСимвола + "0";
		ИначеЕсли ТипШтрихкода = "CODE39FullASCII" Тогда
			ТекСимвол = Сред(ШтрихКод, Итерация, 1);
			КодСимвола = ВсеФормулы[КодСимвола(ТекСимвол)];
			Для е=1 По СтрДлина(КодСимвола) Цикл
				КодСимвола39 = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволов39()[Сред(КодСимвола, е, 1)];
				КодДвоичРезультат = КодДвоичРезультат + КодСимвола39 +"0";  //?
			КонецЦикла;
		ИначеЕсли ТипШтрихкода = "CODE93" ИЛИ ТипШтрихкода = "MSI" Тогда
			ТекСимвол = Сред(ШтрихКод, Итерация, 1);
			КодСимвола = ВсеФормулы[ТекСимвол];
			КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
		ИначеЕсли ТипШтрихкода = "PHARMACODE" Тогда
			ТекСимвол = Сред(ШтрихКод, Итерация, 1);	
			КодДвоичРезультат = КодДвоичРезультат + ?(КодДвоичРезультат = "", "", "00") + ?(ТекСимвол = "1", "111", "1");
		ИначеЕсли ТипШтрихкода = "CODE2OF5" ИЛИ ТипШтрихкода = "ITF14" Тогда
			///Тут пары символов.
			Итерация = Итерация + 1;
			ТекСимвол = Сред(ШтрихКод, Итерация-1, 2);
			КодСимвола = ВсеФормулы[ТекСимвол];
			КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
		ИначеЕсли ТипШтрихкода = "CODE128" Тогда
			///Тут пары символов.
			СоответствиеФормулы = Неопределено;
			СоответствиеФормулыПредыдущей = Неопределено;
			
			ТекСимвол = Сред(ШтрихКод, Итерация, 2);
			Подтип128КодаПредыдущий = Подтип128Кода;
			Подтип128Кода = ?(Шк_Barcode1D_КлиентСервер.RegExТест(Сред(ТекСимвол, 1, 2), "[0-9]{2}"), "C", ?(Шк_Barcode1D_КлиентСервер.RegExТест(Сред(ТекСимвол, 1, 1), "[&#013;&#009;-&#010;]"), "A", "B"));
			Если Подтип128Кода = "C" Тогда
				ВсеФормулы.Свойство(Подтип128Кода, СоответствиеФормулы);
				ВсеФормулы.Свойство(Подтип128КодаПредыдущий, СоответствиеФормулыПредыдущей);
				Если Подтип128КодаПредыдущий <> Подтип128Кода Тогда 
					ПереключательКодСимвола = СоответствиеФормулыПредыдущей["CODE C"];
					Переключатель = СоответствиеФормулыПредыдущей[ПереключательКодСимвола];
					КодДвоичРезультат = КодДвоичРезультат + Переключатель;
					СтрокаДляКСКод128 = СтрокаДляКСКод128 + Символ(ПереключательКодСимвола);
				КонецЕсли;
				КодСимвола = СоответствиеФормулы[ТекСимвол];
				КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
				СтрокаДляКСКод128 = СтрокаДляКСКод128 + ТекСимвол;
				Итерация = Итерация + 1;
			ИначеЕсли Подтип128Кода = "B" ИЛИ Подтип128Кода = "A" Тогда
				ВсеФормулы.Свойство(Подтип128Кода, СоответствиеФормулы);
				ВсеФормулы.Свойство(Подтип128КодаПредыдущий, СоответствиеФормулыПредыдущей);
				ТекСимвол = Сред(ШтрихКод, Итерация, 1);
				ЗаТекСимвол = Сред(ШтрихКод, Итерация+1, 1);
				ЗаТекПара = Сред(ШтрихКод, Итерация+2, 1);
				Если Подтип128КодаПредыдущий <> "C" И Подтип128КодаПредыдущий <> Подтип128Кода Тогда
					///Нам нужно принять решение переключаться на один следующий символ с SHIFT или переключаться перманентно с CODE
					Шифт = (НЕ Шк_Barcode1D_КлиентСервер.RegExТест(ЗаТекПара, "[0-9]{2}")) ИЛИ (Подтип128Кода = "A" И (НЕ Шк_Barcode1D_КлиентСервер.RegExТест(ЗаТекПара, "[&#013;&#009;-&#010;]+"))) ИЛИ (Подтип128Кода = "B" И (НЕ Шк_Barcode1D_КлиентСервер.RegExТест(ЗаТекПара, "[&#0096;-&#0126;]+")));
					Если Шифт Тогда
						ПереключательКодСимвола = СоответствиеФормулыПредыдущей["SHIFT " + Подтип128Кода];
					Иначе
					    ПереключательКодСимвола = СоответствиеФормулыПредыдущей["CODE " + Подтип128Кода];
					КонецЕсли;					
					Переключатель = СоответствиеФормулыПредыдущей[ПереключательКодСимвола];
					КодДвоичРезультат = КодДвоичРезультат + Переключатель;
					СтрокаДляКСКод128 = СтрокаДляКСКод128 + Символ(Число(ПереключательКодСимвола));
				ИначеЕсли Подтип128КодаПредыдущий = "C" И Подтип128КодаПредыдущий <> Подтип128Кода Тогда
					ПереключательКодСимвола = СоответствиеФормулыПредыдущей["CODE " + Подтип128Кода];
					Переключатель = СоответствиеФормулыПредыдущей[ПереключательКодСимвола];
					КодДвоичРезультат = КодДвоичРезультат + Переключатель;
					СтрокаДляКСКод128 = СтрокаДляКСКод128 + Символ(Число(ПереключательКодСимвола)+100);
				КонецЕсли;
				ВсеФормулы.Свойство(Подтип128Кода, СоответствиеФормулы);
				КодСимвола = СоответствиеФормулы[КодСимвола(ТекСимвол)];
				КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
				СтрокаДляКСКод128 = СтрокаДляКСКод128 + ТекСимвол;
				Если Шифт = Истина Тогда
					Подтип128Кода = Подтип128КодаПредыдущий;	
				КонецЕсли;
			КонецЕсли;
			Если Итерация = ОбщееКоличествоСимволовШК-1 И НЕ СтрДлина(ШтрихКод) = ОбщееКоличествоСимволовШК Тогда
				ШтрихКод = ШтрихКод + КонтрольныйСимволCode128(СимволыСтарт, СтрокаДляКСКод128, ВсеФормулы);			
			КонецЕсли;
		ИначеЕсли ТипШтрихкода = "EAN128" Тогда
			///Тут пары символов.
			
			СоответствиеФормулы = Неопределено;
			СоответствиеФормулыПредыдущей = Неопределено;
			
			ТекСимвол = Сред(ШтрихКод, Итерация, 2);
			Подтип128КодаПредыдущий = Подтип128Кода;
			Подтип128Кода = ?(Шк_Barcode1D_КлиентСервер.RegExТест(Сред(ТекСимвол, 1, 2), "[0-9]{2}"), "C", ?(Шк_Barcode1D_КлиентСервер.RegExТест(Сред(ТекСимвол, 1, 1), "[&#013;&#009;-&#010;]"), "A", "B"));
			Если КартаИндексовИдентификаторов[Итерация] = Символ(202) Тогда
				КодСимвола = ВсеФормулы.C["102"];
				КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
				СтрокаДляКСКод128 = СтрокаДляКСКод128 + Символ(202);
			КонецЕсли;
			Если Подтип128Кода = "C" Тогда
				ВсеФормулы.Свойство(Подтип128Кода, СоответствиеФормулы);
				ВсеФормулы.Свойство(Подтип128КодаПредыдущий, СоответствиеФормулыПредыдущей);
				Если Подтип128КодаПредыдущий <> Подтип128Кода Тогда 
					ПереключательКодСимвола = СоответствиеФормулыПредыдущей["CODE C"];
					Переключатель = СоответствиеФормулыПредыдущей[ПереключательКодСимвола];
					КодДвоичРезультат = КодДвоичРезультат + Переключатель;
					СтрокаДляКСКод128 = СтрокаДляКСКод128 + Символ(ПереключательКодСимвола);
				КонецЕсли;
				КодСимвола = СоответствиеФормулы[ТекСимвол];
				КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
				СтрокаДляКСКод128 = СтрокаДляКСКод128 + ТекСимвол;
				Итерация = Итерация + 1;
			ИначеЕсли Подтип128Кода = "B" ИЛИ Подтип128Кода = "A" Тогда
				ВсеФормулы.Свойство(Подтип128Кода, СоответствиеФормулы);
				ВсеФормулы.Свойство(Подтип128КодаПредыдущий, СоответствиеФормулыПредыдущей);
				ТекСимвол = Сред(ШтрихКод, Итерация, 1);
				ЗаТекСимвол = Сред(ШтрихКод, Итерация+1, 1);
				ЗаТекПара = Сред(ШтрихКод, Итерация+2, 1);
				Если Подтип128КодаПредыдущий <> "C" И Подтип128КодаПредыдущий <> Подтип128Кода Тогда
					///Нам нужно принять решение переключаться на один следующий символ с SHIFT или переключаться перманентно с CODE
					Шифт = (НЕ Шк_Barcode1D_КлиентСервер.RegExТест(ЗаТекПара, "[0-9]{2}")) ИЛИ (Подтип128Кода = "A" И (НЕ Шк_Barcode1D_КлиентСервер.RegExТест(ЗаТекПара, "[&#013;&#009;-&#010;]+"))) ИЛИ (Подтип128Кода = "B" И (НЕ Шк_Barcode1D_КлиентСервер.RegExТест(ЗаТекПара, "[&#0096;-&#0126;]+")));
					Если Шифт Тогда
						ПереключательКодСимвола = СоответствиеФормулыПредыдущей["SHIFT " + Подтип128Кода];
					Иначе
					    ПереключательКодСимвола = СоответствиеФормулыПредыдущей["CODE " + Подтип128Кода];
					КонецЕсли;					
					Переключатель = СоответствиеФормулыПредыдущей[ПереключательКодСимвола];
					КодДвоичРезультат = КодДвоичРезультат + Переключатель;
					СтрокаДляКСКод128 = СтрокаДляКСКод128 + Символ(Число(ПереключательКодСимвола));
				ИначеЕсли Подтип128КодаПредыдущий = "C" И Подтип128КодаПредыдущий <> Подтип128Кода Тогда
					ПереключательКодСимвола = СоответствиеФормулыПредыдущей["CODE " + Подтип128Кода];
					Переключатель = СоответствиеФормулыПредыдущей[ПереключательКодСимвола];
					КодДвоичРезультат = КодДвоичРезультат + Переключатель;
					СтрокаДляКСКод128 = СтрокаДляКСКод128 + Символ(Число(ПереключательКодСимвола)+100);
				КонецЕсли;
				ВсеФормулы.Свойство(Подтип128Кода, СоответствиеФормулы);
				КодСимвола = СоответствиеФормулы[КодСимвола(ТекСимвол)];
				КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
				СтрокаДляКСКод128 = СтрокаДляКСКод128 + ТекСимвол;
				Если Шифт = Истина Тогда
					Подтип128Кода = Подтип128КодаПредыдущий;	
				КонецЕсли;
			КонецЕсли;
		    Если Итерация = ОбщееКоличествоСимволовШК-1 И НЕ СтрДлина(ШтрихКод) = ОбщееКоличествоСимволовШК Тогда
				ШтрихКод = ШтрихКод + КонтрольныйСимволCode128(СимволыСтарт, СтрокаДляКСКод128, ВсеФормулы);			
			КонецЕсли;
		ИначеЕсли ТипШтрихкода = "EAN13" ИЛИ ТипШтрихкода = "EAN13AddOn2" ИЛИ ТипШтрихкода = "EAN13AddOn5" ИЛИ ТипШтрихкода = "EAN8" Тогда
			ТекСимвол = Сред(ШтрихКод, Итерация, 1);
			ТекФормула = Сред(Формула, Итерация - КорректорИтерации, 1);
		
			КлючКода = ТекСимвол + ТекФормула;
		
			КодСимвола = КодыСимволов[КлючКода];
			КодДвоичРезультат = КодДвоичРезультат + КодСимвола;
		КонецЕсли;	
	КонецЦикла;
	
	//добавим зоны стабилизации
	Если ТипШтрихкода = "EAN8" ИЛИ ТипШтрихкода = "EAN13" Тогда
		КодДвоичРезультат = СинхронизацияНачало + Сред(КодДвоичРезультат, 1, КоличествоМодулейВБлоке) + СинхронизацияСередина + Прав(КодДвоичРезультат, КоличествоМодулейВБлоке) + СинхронизацияКонец;
		СтрокаСимволовШтрихкода = СтрокаСимволовШтрихкода + КонтролСимвол;
	ИначеЕсли ТипШтрихкода = "EAN13AddOn2" Тогда
		КодДвоичРезультат = СинхронизацияНачало + Сред(КодДвоичРезультат, 1, КоличествоМодулейВБлоке) + СинхронизацияСередина + Прав(КодДвоичРезультат, КоличествоМодулейВБлоке) + СинхронизацияКонец + БелоеПоле + "01011" + Шк_Barcode1D_СерверПовтИсп.КодировкаСимволовEAN()[Сред(СтрокаСимволовШтрихкода, 13, 1)+Сред(Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовEAN("EAN13AddOn2")[Сред(СтрокаСимволовШтрихкода, 13, 2)], 1, 1)] + "01" + Шк_Barcode1D_СерверПовтИсп.КодировкаСимволовEAN()[Сред(СтрокаСимволовШтрихкода, 14, 1)+Сред(Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовEAN("EAN13AddOn2")[Сред(СтрокаСимволовШтрихкода, 13, 2)], 2, 1)];
		СтрокаСимволовШтрихкода = Сред(СтрокаСимволовШтрихкода, 1, 12) + КонтролСимвол + Сред(СтрокаСимволовШтрихкода, 13, 2);
	ИначеЕсли ТипШтрихкода = "EAN13AddOn5" Тогда
		КодДвоичРезультат = СинхронизацияНачало + Сред(КодДвоичРезультат, 1, КоличествоМодулейВБлоке) + СинхронизацияСередина + Прав(КодДвоичРезультат, КоличествоМодулейВБлоке) + СинхронизацияКонец + БелоеПоле + ПреобразоватьСимволыEAN5ВДвоичныйКодШтрихкода(Сред(СтрокаСимволовШтрихкода, 13, 5));
		СтрокаСимволовШтрихкода = Сред(СтрокаСимволовШтрихкода, 1, 12) + КонтролСимвол + Сред(СтрокаСимволовШтрихкода, 13, 5);
	ИначеЕсли ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
		КодДвоичРезультат = БелоеПоле + СинхронизацияНачало + КодДвоичРезультат + СинхронизацияКонец + "1" + БелоеПоле;
	ИначеЕсли ТипШтрихкода = "ITF14" ИЛИ ТипШтрихкода = "CODE11" ИЛИ ТипШтрихкода = "MSI" ИЛИ ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
		КодДвоичРезультат = БелоеПоле + СинхронизацияНачало + КодДвоичРезультат + СинхронизацияКонец + БелоеПоле;
		СтрокаСимволовШтрихкода = СтрокаСимволовШтрихкода + КонтролСимвол;
	Иначе
		КодДвоичРезультат = БелоеПоле + СинхронизацияНачало + КодДвоичРезультат + СинхронизацияКонец + БелоеПоле;
	КонецЕсли;
	
	Возврат КодДвоичРезультат;
		
КонецФункции

// Функция - Преобразовать символы EAN5 в двоичный код штрихкода
//
// Параметры:
//  СтрокаСимволовШтрихкода	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПреобразоватьСимволыEAN5ВДвоичныйКодШтрихкода(СтрокаСимволовШтрихкода)
	
	ДвоичнаяСтрокаШтрихкода = "01011";
	
	Если (НЕ ТипЗнч(СтрокаСимволовШтрихкода)=Тип("Строка")) ИЛИ СтрДлина(СтрокаСимволовШтрихкода) > 5 Тогда
		ВызватьИсключение("Неверный параметр 1");
	КонецЕсли;
	
	КонтрольныйСимвол = КонтрольныйСимволEAN5(СтрокаСимволовШтрихкода);
	ФормулаКодировки5 =  Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволовEAN("EAN13AddOn5")[КонтрольныйСимвол];
	
	Для Инд = 1 По 5 Цикл
		ДвоичнаяСтрока = Шк_Barcode1D_СерверПовтИсп.КодировкаСимволовEAN()[Сред(СтрокаСимволовШтрихкода, Инд, 1) + Сред(ФормулаКодировки5, Инд, 1)];
		ДвоичнаяСтрокаШтрихкода = ДвоичнаяСтрокаШтрихкода + ДвоичнаяСтрока + ?(Инд=5, "", "01");		
	КонецЦикла;
	
	Возврат ДвоичнаяСтрокаШтрихкода;
	
КонецФункции

// Функция - Сформировать картинку SVG
//
// Параметры:
//  ДвоичныйКод		 - 	 - 
//  ВыводитьРамку	 - 	 - 
//  ВывестиТекст	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция СформироватьКартинкуSVG(ТипШтрихкода, ДвоичныйКод, Поворот, ВыводитьРамку, ВысотаШтрихкодаПикс=Неопределено, ЦветШтрихкода, ЦветСимволовТекста, ПоложениеТекстаПоВертикали, ПоложениеТекстаПоГоризонтали, Трекинг, Шрифт, ЗНАЧ ВывестиТекст = "")
		
	Ошибка = "Invalid data!";
	
	Если НЕ ВывестиТекст = "error" Тогда
		КоличествоМодулей = 0;
		ДиапазонСимволовСтабилизации = Новый Структура;
		ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 1);
		ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 3);
		Если ТипШтрихкода = "EAN13" Тогда
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 46);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 50);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 92);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 95);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = Сред(ВывестиТекст, 1, 1) + " " + Сред(ВывестиТекст, 2, 6) + Сред(ВывестиТекст, 8, 6) + " " + ">"; 
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "28mm";
			Иначе
				///Тут фиксированное, доделать
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			ДлинаSVG = "38mm";
		ИначеЕсли ТипШтрихкода = "EAN13AddOn2" Тогда
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 46);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 50);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 92);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 95);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = Сред(ВывестиТекст, 1, 1) + " " + Сред(ВывестиТекст, 2, 6) + Сред(ВывестиТекст, 8, 8); 
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "28mm";
			Иначе
				///Тут фиксированное, доделать
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			ДлинаSVG = "47mm";
		ИначеЕсли ТипШтрихкода = "EAN13AddOn5" Тогда
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 46);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 50);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 92);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 95);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = Сред(ВывестиТекст, 1, 1) + " " + Сред(ВывестиТекст, 2, 6) + Сред(ВывестиТекст, 8, 11); 
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "28mm";
			Иначе
				///Тут фиксированное, доделать
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			ДлинаSVG = "55mm";
		ИначеЕсли ТипШтрихкода = "EAN8" Тогда
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 32);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 36);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 65);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 67);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = Сред(ВывестиТекст, 1, 4) + Сред(ВывестиТекст, 5, 4);
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "22mm";
			Иначе
				///Тут фиксированное, доделать
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			ДлинаSVG = "27mm";
		ИначеЕсли ТипШтрихкода = "PHARMACODE" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "7mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			ДлинаSVG = "24mm";
		ИначеЕсли ТипШтрихкода = "CODE11" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "27mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "CODE39" ИЛИ ТипШтрихкода = "CODE39FullASCII" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "27mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "CODE93" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "27mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "MSI" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "27mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "15mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "24mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "CODE2OF5" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "23mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "24mm";
			Иначе
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			///Предварительно, длину придется динамически вычислять.
			ДлинаSVG = "160mm";
		ИначеЕсли ТипШтрихкода = "ITF14" Тогда
			ДиапазонСимволовСтабилизации.Вставить("ЛевоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ЛевоОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("СерединаОкончание", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоНачало", 0);
			ДиапазонСимволовСтабилизации.Вставить("ПравоОкончание", 0);
			Если НЕ ПустаяСтрока(ВывестиТекст) Тогда
				ВывестиТекст = ВывестиТекст;
			КонецЕсли;
			Если ВысотаШтрихкодаПикс=Неопределено Тогда
				ВысотаSVG = "54mm";
			Иначе
				///Тут фиксированное, доделать
				ВысотаSVG = Формат(Окр(ВысотаШтрихкодаПикс / 3.7795, 3), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;
			ДлинаSVG = "158mm";
		КонецЕсли;
		
		ПредыдущийСимвол = Неопределено;
		ПоследнийНомерСимвола = 0;
		СтрокаКонкатенации = "";
		СоответствиеИндексов = Новый Соответствие;
		КоличествоЖирныхШтрихов = 0;
		
		Для НомерСимвола = 1 По СтрДлина(ДвоичныйКод) Цикл		
			БинСимвол = Сред(ДвоичныйКод, НомерСимвола, 1);
			Если БинСимвол = ПредыдущийСимвол Тогда
				СоответствиеИндексов[ПоследнийНомерСимвола] = СоответствиеИндексов[ПоследнийНомерСимвола] + 1;
			Иначе
				СоответствиеИндексов.Вставить(НомерСимвола, 1);
				ПоследнийНомерСимвола = НомерСимвола;
			КонецЕсли;		
			ПредыдущийСимвол = БинСимвол;		
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СоответствиеИндексов Цикл
			Если КлючИЗначение.Значение > 1 И КлючИЗначение.Значение < 10 Тогда
				КоличествоЖирныхШтрихов = КоличествоЖирныхШтрихов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипШтрихкода = "CODE2OF5" Тогда
			ДлинаSVG = Формат((СтрДлина(ДвоичныйКод)-КоличествоЖирныхШтрихов)*0.495 + КоличествоЖирныхШтрихов/3*2.65*0.495 + ?(ВыводитьРамку, 2, 0), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0") + "mm";
		ИначеЕсли ТипШтрихкода = "CODE93" ИЛИ ТипШтрихкода = "CODE11" ИЛИ ТипШтрихкода = "CODE39" ИЛИ ТипШтрихкода = "CODE39FullASCII" ИЛИ ТипШтрихкода = "MSI" Тогда
			ДлинаSVG = Формат(СтрДлина(ДвоичныйКод)*0.495 + ?(ВыводитьРамку, 2, 0), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0") + "mm";
		ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
			ДлинаSVG = Формат(СтрДлина(ДвоичныйКод)*0.495 + ?(ВыводитьРамку, 2, 0), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0") + "mm";
		ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
			ДлинаSVG = Формат(СтрДлина(ДвоичныйКод)*0.165 + ?(ВыводитьРамку, 2, 0), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0") + "mm";
		ИначеЕсли ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
			ДлинаSVG = Формат(СтрДлина(ДвоичныйКод)*0.495 + ?(ВыводитьРамку, 2, 0), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0") + "mm";
		КонецЕсли;
	Иначе
		///Placeholder
		ВывестиТекст = Ошибка;
		ДлинаSVG = "40mm";
		ВысотаSVG = "25mm";
	КонецЕсли;
	
	ФабрикаЭкспорта = ФабрикаXDTO;
	
	XDTOSVG 	= ФабрикаЭкспорта.Тип("http://www.w3.org/2000/svg", "svg");
	SVG 		= ФабрикаЭкспорта.Создать(XDTOSVG);
	SVG.version = "1.1";
	///Поворот нужно будет проверять на max/min символов для безразмерных ШК
	Если Поворот Тогда
		SVG.height  = ДлинаSVG;
		SVG.width   = ВысотаSVG;
		Если ТипШтрихкода = "EAN8" Тогда
			SVG.transform   = "rotate(90, 40, 40)";
		ИначеЕсли ТипШтрихкода = "EAN13" Тогда
			SVG.transform   = "rotate(90, 47, 47)";
		ИначеЕсли ТипШтрихкода = "EAN13AddOn2" Тогда
			SVG.transform   = "rotate(90, 47, 47)";
		ИначеЕсли ТипШтрихкода = "EAN13AddOn5" Тогда
			SVG.transform   = "rotate(90, 47, 47)";
		ИначеЕсли ТипШтрихкода = "ITF14" Тогда 
			SVG.transform   = "rotate(90, 90, 90)";
		ИначеЕсли ТипШтрихкода = "CODE2OF5" Тогда 
			SVG.transform   = "rotate(90, 42.5, 42.5)";
		Иначе
			SVG.transform   = "rotate(90, 47.5, 47.5)";
		КонецЕсли;
	Иначе
		SVG.height  = ВысотаSVG;
		SVG.width   = ДлинаSVG;
	КонецЕсли;
	
	XDTOGRECT 	= ФабрикаЭкспорта.Тип("http://www.w3.org/2000/svg", "rectType");
	GRECT  		= ФабрикаЭкспорта.Создать(XDTOGRECT);
	
	Если ((ТипШтрихкода = "CODE39" ИЛИ ТипШтрихкода = "CODE39FullASCII" ИЛИ ТипШтрихкода = "CODE93" 
		ИЛИ ТипШтрихкода = "CODE11" ИЛИ ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" ИЛИ ТипШтрихкода = "CODE2OF5" 
		ИЛИ ТипШтрихкода = "INDUSTRIAL2OF5" ИЛИ ТипШтрихкода = "CODABAR") И ВыводитьРамку) ИЛИ ВывестиТекст = Ошибка Тогда				
		GRECT.x = "0";
		GRECT.y = "0";
		GRECT.width = ДлинаSVG;
		GRECT.height = ВысотаSVG;
		GRECT.fill = "none";
		GRECT.stroke = "black";
		GRECT.stroke_width = "1mm";
		GRECT.stroke_opacity="1";
		
		SVG.rect.Добавить(GRECT);
	ИначеЕсли ТипШтрихкода = "ITF14" Тогда
		GRECT.x = "3mm";
		GRECT.y = "3mm";
		GRECT.width = "152.4mm";
		GRECT.height = "36.7mm"; ///41.4mm
		GRECT.fill = "none";
		GRECT.stroke = "black";
		GRECT.stroke_width = "4.83mm";
		GRECT.stroke_opacity="1";
		
		SVG.rect.Добавить(GRECT);
	КонецЕсли;
	
	Если НЕ ВывестиТекст = Ошибка Тогда
		КоординатаХ = 0;
		Для НомерСимвола = 1 По СтрДлина(ДвоичныйКод) Цикл		
			LRECT  		= ФабрикаЭкспорта.Создать(XDTOGRECT);
			БинСимвол = Сред(ДвоичныйКод, НомерСимвола, 1);
			ЦветЗаливки = "fill: rgb(" + Строка(ЦветШтрихкода.Красный) + ", " + Строка(ЦветШтрихкода.Зеленый)  + ", " + Строка(ЦветШтрихкода.Синий) + ")";
			Если ЦветШтрихкода.Красный = -1 Тогда
				ЦветЗаливки = "fill: black";	
			КонецЕсли;
			Стиль = ?(БинСимвол = "0", "fill: white", ЦветЗаливки);
			
			ЗначениеВКарте = СоответствиеИндексов[НомерСимвола];
			Если ЗначениеВКарте = Неопределено Тогда
				Продолжить;	
			КонецЕсли;

			Если ТипШтрихкода = "ITF14" Тогда
					LRECT.y = "5.46mm";
				LRECT.x = Формат((КоординатаХ+4.83), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				Если ЗначениеВКарте=1 ИЛИ ЗначениеВКарте=10 Тогда
					Толщина = ЗначениеВКарте*1.016;
				Иначе
					Толщина = ЗначениеВКарте/3*2.65*1.016;
				КонецЕсли;
				LRECT.width = Формат(Толщина, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
				КоординатаХ = КоординатаХ + Толщина;
			ИначеЕсли ТипШтрихкода = "EAN13" Тогда
				LRECT.x = Формат((НомерСимвола + 10)*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				LRECT.y = "0mm";
				LRECT.width = Формат(ЗначениеВКарте*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			ИначеЕсли ТипШтрихкода = "EAN13AddOn2" ИЛИ ТипШтрихкода = "EAN13AddOn5" Тогда
				LRECT.x = Формат((НомерСимвола + 10)*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				Если НомерСимвола > ДиапазонСимволовСтабилизации.ПравоОкончание Тогда
					LRECT.y = "4mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.width = Формат(ЗначениеВКарте*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			ИначеЕсли ТипШтрихкода = "EAN8" Тогда
				LRECT.x = Формат((НомерСимвола + 6)*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				LRECT.y = "0mm";
				LRECT.width = Формат(ЗначениеВКарте*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			ИначеЕсли ТипШтрихкода = "CODE11" Тогда
				LRECT.x = Формат(НомерСимвола*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				Если ВысотаШтрихкодаПикс=Неопределено Тогда
					LRECT.y = "1mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.width = Формат(ЗначениеВКарте*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			ИначеЕсли ТипШтрихкода = "PHARMACODE" Тогда
				LRECT.x = Формат(НомерСимвола*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				Если ВысотаШтрихкодаПикс=Неопределено Тогда
					LRECT.y = "1mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.width = Формат(ЗначениеВКарте*0.33, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
				LRECT.x = Формат(НомерСимвола*0.165, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				Если ВысотаШтрихкодаПикс=Неопределено Тогда
					LRECT.y = "1mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.width = Формат(ЗначениеВКарте*0.165, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			ИначеЕсли ТипШтрихкода = "CODE2OF5" Тогда
				Если ВысотаШтрихкодаПикс=Неопределено Тогда
					LRECT.y = "2mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.x = Формат(КоординатаХ + ?(ВыводитьРамку, 1, 0), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				Если ЗначениеВКарте=1 ИЛИ ЗначениеВКарте=10 Тогда
					Толщина = ЗначениеВКарте*0.495;
				Иначе
					Толщина = ЗначениеВКарте/3*2.65*0.495;
				КонецЕсли;
				LRECT.width = Формат(Толщина, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
				КоординатаХ = КоординатаХ + Толщина;
			ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
				LRECT.x = Формат(НомерСимвола*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				Если ВысотаШтрихкодаПикс=Неопределено Тогда
					LRECT.y = "1mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.width = Формат(ЗначениеВКарте*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			ИначеЕсли ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
				Если ВысотаШтрихкодаПикс=Неопределено Тогда
					LRECT.y = "2mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.x = Формат((НомерСимвола)*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				LRECT.width = Формат(ЗначениеВКарте*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			Иначе
				Если ВысотаШтрихкодаПикс=Неопределено Тогда
					LRECT.y = "2mm";
				Иначе
					LRECT.y = "0mm";
				КонецЕсли;
				LRECT.x = Формат((НомерСимвола)*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				LRECT.width = Формат(ЗначениеВКарте*0.495, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")+"mm";
			КонецЕсли;	
			
			Если (НомерСимвола >= ДиапазонСимволовСтабилизации.ЛевоНачало И НомерСимвола <= ДиапазонСимволовСтабилизации.ЛевоОкончание) ИЛИ (НомерСимвола >= ДиапазонСимволовСтабилизации.СерединаНачало И НомерСимвола <= ДиапазонСимволовСтабилизации.СерединаОкончание) ИЛИ (НомерСимвола >= ДиапазонСимволовСтабилизации.ПравоНачало И НомерСимвола <= ДиапазонСимволовСтабилизации.ПравоОкончание) Тогда
				Если ТипШтрихкода = "EAN13" Тогда
					LRECT.height = "24.5mm";
				ИначеЕсли ТипШтрихкода = "EAN13AddOn2" ИЛИ ТипШтрихкода = "EAN13AddOn5" Тогда
					LRECT.height = "24.5mm";
				ИначеЕсли ТипШтрихкода = "EAN8" Тогда
					LRECT.height = "19.77mm";
				ИначеЕсли ТипШтрихкода = "PHARMACODE" Тогда
					LRECT.height = "6mm";
				ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - 6, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE39" ИЛИ ТипШтрихкода = "CODE39FullASCII" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE11" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE93" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "MSI" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, (Шрифт.Размер * 0.351 * 1.15) + 4.5, (Шрифт.Размер * 0.351 * 1.15)), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				ИначеЕсли ТипШтрихкода = "CODE2OF5" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "ITF14" Тогда
					LRECT.height = "31.75mm";
				КонецЕсли;
			Иначе
				Если ТипШтрихкода = "EAN13" Тогда
					LRECT.height = "22.85mm";
				ИначеЕсли ТипШтрихкода = "EAN13AddOn2" ИЛИ ТипШтрихкода = "EAN13AddOn5" Тогда
					Если НомерСимвола > ДиапазонСимволовСтабилизации.ПравоОкончание Тогда
						LRECT.height = "18.85mm";
					Иначе
						LRECT.height = "22.85mm";
					КонецЕсли;
				ИначеЕсли ТипШтрихкода = "EAN8" Тогда
					LRECT.height = "18.23mm";
				ИначеЕсли ТипШтрихкода = "PHARMACODE" Тогда
					LRECT.height = "6mm";
				ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - 6, "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE39" ИЛИ ТипШтрихкода = "CODE39FullASCII" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE11" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE93" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "MSI" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, (Шрифт.Размер * 0.351 * 1.15) + 4.5, (Шрифт.Размер * 0.351 * 1.15)), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm";
				ИначеЕсли ТипШтрихкода = "CODE2OF5" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
					LRECT.height = Формат(Число(СтрЗаменить(ВысотаSVG, "mm", "")) - ?(ВысотаШтрихкодаПикс=Неопределено, 8, 3.5), "ЧЦ=6; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "mm"; ///Нужно вычислять по размеру кегля надписи. 4мм - это 14 кегль 3,5мм + 0,5 на интервалы.
				ИначеЕсли ТипШтрихкода = "ITF14" Тогда
					LRECT.height = "31.75mm";
				КонецЕсли;
			КонецЕсли;
			LRECT.style = Стиль;
			
			КоличествоМодулей = КоличествоМодулей + 1;
			Если НЕ БинСимвол = "0" Тогда
				SVG.rect.Добавить(LRECT);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	///Коэффициент mm/px для svg = 3.7795
	Если НЕ ПустаяСтрока(ВывестиТекст) Тогда		
		XDTOTEXT 	= ФабрикаЭкспорта.Тип("http://www.w3.org/2000/svg", "textType");
		TEXT  		= ФабрикаЭкспорта.Создать(XDTOTEXT);
		TEXT.__content = ВывестиТекст;
		Если НЕ ВывестиТекст = Ошибка Тогда
			Если ТипШтрихкода = "ITF14" Тогда
				Если ВысотаШтрихкодаПикс=Неопределено Тогда					
					TEXT.y = ПоложениеТекстаПоВертикали*3.7795;
					TEXT.x = (Число(СтрЗаменить(ДлинаSVG, "mm", "")))*3.7795/2;
				Иначе
					TEXT.y = ВысотаШтрихкодаПикс - Шрифт.Размер;
					TEXT.x = (Число(СтрЗаменить(ДлинаSVG, "mm", "")))*2;
				КонецЕсли;
				TEXT.text_anchor = "middle";
			ИначеЕсли ТипШтрихкода = "EAN8" Тогда
				TEXT.__content = Сред(ВывестиТекст, 1, 4) + " " + Сред(ВывестиТекст, 5, 4);
				TEXT.y = Формат(ПоложениеТекстаПоВертикали*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = Формат(ПоложениеТекстаПоГоризонтали*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
			ИначеЕсли ТипШтрихкода = "EAN13" Тогда
				TEXT.y = Формат(ПоложениеТекстаПоВертикали*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = Формат(ПоложениеТекстаПоГоризонтали*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
			ИначеЕсли ТипШтрихкода = "EAN13AddOn2" ИЛИ ТипШтрихкода = "EAN13AddOn5" Тогда
				TEXT.__content = Сред(ВывестиТекст, 1, 14);
				TEXT.y = Формат(ПоложениеТекстаПоВертикали*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = Формат(ПоложениеТекстаПоГоризонтали*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
			ИначеЕсли ТипШтрихкода = "CODE128" ИЛИ ТипШтрихкода = "EAN128" Тогда
				TEXT.y = Формат(ПоложениеТекстаПоВертикали-3, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = (Число(СтрЗаменить(ДлинаSVG, "mm", "")))*3.7795/2;
				TEXT.text_anchor = "middle";
			ИначеЕсли ТипШтрихкода = "CODABAR" Тогда
				TEXT.y = Формат(ПоложениеТекстаПоВертикали, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = (Число(СтрЗаменить(ДлинаSVG, "mm", "")))*3.7795/2;
				TEXT.text_anchor = "middle";
			ИначеЕсли ТипШтрихкода = "CODE11" Тогда
				TEXT.y = Формат(ПоложениеТекстаПоВертикали, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = (Число(СтрЗаменить(ДлинаSVG, "mm", "")))*3.7795/2;
				TEXT.text_anchor = "middle";
			ИначеЕсли ТипШтрихкода = "INDUSTRIAL2OF5" Тогда
				TEXT.y = Формат(ПоложениеТекстаПоВертикали, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = (Число(СтрЗаменить(ДлинаSVG, "mm", "")))*3.7795/2;
				TEXT.text_anchor = "middle";
			Иначе
				TEXT.y = Формат(ПоложениеТекстаПоВертикали, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
				TEXT.x = (Число(СтрЗаменить(ДлинаSVG, "mm", "")))*3.7795/2-5*0.495*3.7795;
				TEXT.text_anchor = "middle";
			КонецЕсли;
			TEXT.font_size = Формат(Шрифт.Размер, "ЧЦ=7; ЧДЦ=; ЧН=0; ЧГ=0") + "px";
			TEXT.letter_spacing = Формат(Трекинг, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "px";
		Иначе
			TEXT.y = Формат(42, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
			TEXT.x = Формат(2, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
			TEXT.font_size = Формат(14, "ЧЦ=7; ЧДЦ=; ЧН=0; ЧГ=0") + "px";
			TEXT.letter_spacing = Формат(0, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "px";
		КонецЕсли;
		TEXT.font_family = "monospace";;
		TEXT.font_style = "normal";
		ЦветТ = "rgb(" + Строка(ЦветСимволовТекста.Красный) + ", " + Строка(ЦветСимволовТекста.Зеленый)  + ", " + Строка(ЦветСимволовТекста.Синий) + ")";
		Если ЦветСимволовТекста.Красный = -1 Тогда
			ЦветТ = "black";	
		КонецЕсли;
		TEXT.font_weight = "bold";
		TEXT.fill = ЦветТ;
		SVG.text.Добавить(TEXT);
		
		Если ТипШтрихкода = "EAN13AddOn2" Тогда
			TEXT2 = ФабрикаЭкспорта.Создать(XDTOTEXT);
			TEXT2.__content = Сред(ВывестиТекст, 15, 2);
			TEXT2.y = "10";
			TEXT2.x = Формат((ПоложениеТекстаПоГоризонтали + 37)*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
			TEXT2.font_size = Формат(Шрифт.Размер, "ЧЦ=7; ЧДЦ=; ЧН=0; ЧГ=0") + "px";
			TEXT2.letter_spacing = Формат(Трекинг, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "px";
			TEXT2.font_family = "monospace";;
			TEXT2.font_style = "normal";
			TEXT2.font_weight = "bold";
			TEXT2.fill = ЦветТ;
			SVG.text.Добавить(TEXT2);
		ИначеЕсли ТипШтрихкода = "EAN13AddOn5" Тогда
			TEXT2 = ФабрикаЭкспорта.Создать(XDTOTEXT);
			TEXT2.__content = Сред(ВывестиТекст, 15, 5);
			TEXT2.y = "10";
			TEXT2.x = Формат((ПоложениеТекстаПоГоризонтали + 38)*3.7795, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧН=0; ЧГ=0");
			TEXT2.font_size = Формат(Шрифт.Размер, "ЧЦ=7; ЧДЦ=; ЧН=0; ЧГ=0") + "px";
			TEXT2.letter_spacing = Формат(Трекинг, "ЧЦ=7; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + "px";
			TEXT2.font_family = "monospace";;
			TEXT2.font_style = "normal";
			TEXT2.font_weight = "bold";
			TEXT2.fill = ЦветТ;
			SVG.text.Добавить(TEXT2);
		КонецЕсли;
	КонецЕсли;
	
	Запись = Новый ЗаписьXML; 
	Запись.УстановитьСтроку();
	ФабрикаЭкспорта.ЗаписатьXML(Запись, SVG,,,,НазначениеТипаXML.Явное); 
	ДанныеКартинки = Запись.Закрыть();
	
	Поток = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	ЗаписьДанных.ЗаписатьСимволы(ДанныеКартинки);
	ЗаписьДанных.Закрыть();
	ДДКартинки = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	РезультатКартинка = Новый Картинка(ДДКартинки);
	
	РезультатФункции = Новый Структура("Картинка, ВывестиТекст, Поворот, ДлинаSVG, ВысотаSVG, КоличествоМодулей", РезультатКартинка, ВывестиТекст, Поворот, ДлинаSVG, ВысотаSVG, КоличествоМодулей);
	Возврат РезультатФункции;
		
КонецФункции

// Функция - Контрольный символ93
//
// Параметры:
//  ШтрихКод - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КонтрольныйСимволCode93(ЗНАЧ СимволыШтрихкода)
		
	РеференсМассив = Новый Массив;
	РеференсМассив.Вставить(0, "0");
	РеференсМассив.Вставить(1, "1");
	РеференсМассив.Вставить(2, "2");
	РеференсМассив.Вставить(3, "3");
	РеференсМассив.Вставить(4, "4");
	РеференсМассив.Вставить(5, "5");
	РеференсМассив.Вставить(6, "6");
	РеференсМассив.Вставить(7, "7");
	РеференсМассив.Вставить(8, "8");
	РеференсМассив.Вставить(9, "9");
	РеференсМассив.Вставить(10, "A");
	РеференсМассив.Вставить(11, "B");
	РеференсМассив.Вставить(12, "C");
	РеференсМассив.Вставить(13, "D");
	РеференсМассив.Вставить(14, "E");
	РеференсМассив.Вставить(15, "F");
	РеференсМассив.Вставить(16, "G");
	РеференсМассив.Вставить(17, "H");
	РеференсМассив.Вставить(18, "I");
	РеференсМассив.Вставить(19, "J");
	РеференсМассив.Вставить(20, "K");
	РеференсМассив.Вставить(21, "L");
	РеференсМассив.Вставить(22, "M");
	РеференсМассив.Вставить(23, "N");
	РеференсМассив.Вставить(24, "O");
	РеференсМассив.Вставить(25, "P");
	РеференсМассив.Вставить(26, "Q");
	РеференсМассив.Вставить(27, "R");
	РеференсМассив.Вставить(28, "S");
	РеференсМассив.Вставить(29, "T");
	РеференсМассив.Вставить(30, "U");
	РеференсМассив.Вставить(31, "V");
	РеференсМассив.Вставить(32, "W");
	РеференсМассив.Вставить(33, "X");
	РеференсМассив.Вставить(34, "Y");
	РеференсМассив.Вставить(35, "Z");
	РеференсМассив.Вставить(36, "-");
	РеференсМассив.Вставить(37, ".");
	РеференсМассив.Вставить(38, " ");
	РеференсМассив.Вставить(39, "$");
	РеференсМассив.Вставить(40, "/");
	РеференсМассив.Вставить(41, "+");
	РеференсМассив.Вставить(42, "%");
	РеференсМассив.Вставить(43, "($)");
    РеференсМассив.Вставить(44, "(%)");
    РеференсМассив.Вставить(45, "(/)");
    РеференсМассив.Вставить(46, "(+)");
	
	РеференсСписок = Новый СписокЗначений;
	РеференсСписок.ЗагрузитьЗначения(РеференсМассив);
	
	Кодировка93 = Шк_Barcode1D_СерверПовтИсп.ФормулаКодировкиСимволов93();	
	
	КонтрольнаяСумма = 0;
	КонтрольныйСимволС = "";
	КонтрольнаяСимволК = "";
	ПределЦикла = СтрДлина(СимволыШтрихкода) + 1;
	Для Итератор = 1 По ПределЦикла Цикл
		СимволДляСлагаемого = Сред(СимволыШтрихкода, Итератор, ?(Сред(СимволыШтрихкода, Итератор, 1)="(", 3, 1));
		ВесСимвола = ?(СтрНайти(СимволыШтрихкода, "(")=0, СтрДлина(СимволыШтрихкода), ПределЦикла) - (Итератор - 1);
		Слагаемое = РеференсСписок.Индекс(РеференсСписок.НайтиПоЗначению(СимволДляСлагаемого)) * ВесСимвола;
		КонтрольнаяСумма = КонтрольнаяСумма + Слагаемое;
		Если Итератор = ПределЦикла-1 И КонтрольныйСимволС = "" Тогда
			ОстатокКонтрольнаяСумма47 = КонтрольнаяСумма % 47;
			КонтрольныйСимволС = РеференсМассив[ОстатокКонтрольнаяСумма47];
			КонтрольнаяСумма = 0;
			СимволыШтрихкода = СимволыШтрихкода + КонтрольныйСимволС;
			Итератор = 0;
		ИначеЕсли Итератор = ПределЦикла Тогда
			ОстатокКонтрольнаяСумма47 = КонтрольнаяСумма % 47;
			КонтрольныйСимволК = РеференсМассив[ОстатокКонтрольнаяСумма47];
			СимволыШтрихкода = СимволыШтрихкода + КонтрольныйСимволС + КонтрольнаяСимволК;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Кодировка93[КонтрольныйСимволС]+Кодировка93[КонтрольныйСимволК];
		
КонецФункции // КонтрольныйСимволEAN()

// Функция - Контрольный символ c128
//
// Параметры:
//  СимволыСтарт	 - 	 - 
//  СимволыШтрихкода - 	 - 
//  СтруктураФормул	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КонтрольныйСимволCode128(ЗНАЧ СимволыСтарт, ЗНАЧ СимволыШтрихкода, СтруктураФормул)
		
	Переключатель = ?(Число(СимволыСтарт)>105, Число(СимволыСтарт)-100, Число(СимволыСтарт));
	ПредыдущийПереключатель = Неопределено;
	КонтрольнаяСумма = Переключатель;
	ПределЦикла = СтрДлина(СимволыШтрихкода);
	Индекс = 0;
	Для Итератор = 1 По ПределЦикла Цикл
		Если Переключатель = 105 ИЛИ Переключатель = 99 Тогда
			СимволШК = Сред(СимволыШтрихкода, Итератор, 2);
			Индекс = Индекс + 1;
			Если Шк_Barcode1D_КлиентСервер.RegExТест(Сред(СимволШК, 1, 2), "[0-9]{2}") Тогда
				Значение = Число(СимволШК) * Индекс;
				Итератор = Итератор + 1;
			Иначе
				СимволШК = Сред(СимволыШтрихкода, Итератор, 1);
				///ToDO Про символы типа 205 или 245, подумаю...
				Спецсимвол = КодСимвола(СимволШК)-100;
				Если Шк_Barcode1D_КлиентСервер.RegExТест(Сред(СимволШК, 1, 1), "[&#0200;&#0201;]{1}") Тогда
					Переключатель = Спецсимвол;
				КонецЕсли;				
				Значение = Спецсимвол * Индекс;
			КонецЕсли;
		Иначе
			СимволШК = Сред(СимволыШтрихкода, Итератор, 1);
			Индекс = Индекс + 1;
			Если Шк_Barcode1D_КлиентСервер.RegExТест(Сред(СимволШК, 1, 1), "[&#0196;-&#0205;]{1}") Тогда
				///ToDO Про символы типа 205 или 245, подумаю...
				Спецсимвол = КодСимвола(СимволШК)-100;
				Если Шк_Barcode1D_КлиентСервер.RegExТест(Сред(СимволШК, 1, 1), "[&#0198; &#0199;" + ?(Переключатель=103, "&#0200;", "&#0201;") + "]{1}") Тогда
					ПредыдущийПереключатель = Переключатель;
					Переключатель = Спецсимвол;
				КонецЕсли;
				Значение = Спецсимвол * Индекс;
			Иначе
				БинарныйКод = ?(Переключатель = 104 ИЛИ Переключатель = 100 ИЛИ (Переключатель = 98 И ПредыдущийПереключатель = 103), СтруктураФормул.B[КодСимвола(СимволШК)], СтруктураФормул.A[КодСимвола(СимволШК)]);
				СимволC = Неопределено;
				Для Каждого КлючИЗначение Из СтруктураФормул.C Цикл
					Если КлючИЗначение.Значение = БинарныйКод Тогда
						СимволC = КлючИЗначение.Ключ;
					КонецЕсли;
				КонецЦикла;
				Значение = Число(СимволC) * Индекс;
				Если Переключатель = 98 Тогда
					Переключатель = ПредыдущийПереключатель;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		КонтрольнаяСумма = КонтрольнаяСумма + Значение;
	КонецЦикла;
	
	Результат = КонтрольнаяСумма%103;
	Если Результат < 10 Тогда
		Результат = "0" + Строка(Результат);
	Иначе
		Результат = Строка(Результат);
	КонецЕсли;
	
	Если Переключатель = 105 ИЛИ Переключатель = 99 Тогда
		Возврат Результат;
	Иначе
		БинарныйКодРезультата = СтруктураФормул.C[Результат];
		Если Переключатель = 104 ИЛИ Переключатель = 100 ИЛИ (Переключатель = 98 И ПредыдущийПереключатель = 103) Тогда 
			Данные = СтруктураФормул.B;
		Иначе
			Данные = СтруктураФормул.A;
		КонецЕсли;
			
		Для Каждого КлючИЗначение Из Данные Цикл
			Если КлючИЗначение.Значение = БинарныйКодРезультата Тогда
				СимволДанных = Символ(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Если СимволДанных = Неопределено ИЛИ БинарныйКодРезультата = Неопределено Тогда
			ВызватьИсключение("Ошибка вычисления контрольного символа!");
		Иначе
			Возврат СимволДанных;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции //КонтрольныйСимволC128()

// Функция - Контрольный символ UPS
//
// Параметры:
//  ШтрихКод - 	 - 
//  Тип		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КонтрольныйСимволUPS(ЗНАЧ СимволыШтрихкода)
		
	ПреЧек = 0;
	Для Индекс = 1 По СтрДлина(СимволыШтрихкода) Цикл
		Пречек = Пречек + ?(СтрДлина(СимволыШтрихкода)<Индекс+1, 0, Число(Сред(СимволыШтрихкода, Индекс + 1, 1)));
		Пречек = Пречек + Число(Сред(СимволыШтрихкода, Индекс, 1))*3;
		Индекс = Индекс + 1;
	КонецЦикла;
		
	КонтрольнаяЦифра = ?(ПреЧек%10=0, 0, 10 - ПреЧек%10);
	
	Возврат КонтрольнаяЦифра;
		
КонецФункции // КонтрольныйСимволUPS()

// Функция - Контрольный символ EAN
//
// Параметры:
//  ШтрихКод - 	 - 
//  Тип		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КонтрольныйСимволEAN(ЗНАЧ СимволыШтрихкода, Тип)
	
	Четн   = 0;
	Нечетн = 0;
	
	КоличествоИтераций = ?(Тип = 13 ИЛИ Тип = 14, 6, 4);
	
	Для Индекс = 1 По КоличествоИтераций Цикл
		Если НЕ ((Тип = 8) И (Индекс = КоличествоИтераций)) Тогда
			Четн = Четн + Число(Сред(СимволыШтрихкода, 2 * Индекс, 1));
		КонецЕсли;
		Нечетн = Нечетн + Число(Сред(СимволыШтрихкода, 2 * Индекс - 1, 1));
	КонецЦикла;
	
	Если Тип = 14 Тогда
		Нечетн = Нечетн + Число(Сред(СимволыШтрихкода, 13, 1));
		Нечетн = Нечетн * 3;
	ИначеЕсли Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтрольнаяЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтрольнаяЦифра = 10, "0", Строка(КонтрольнаяЦифра));
	
КонецФункции // КонтрольныйСимволEAN()

// Функция - Контрольный символ EAN5
//
// Параметры:
//  СимволыШтрихкода - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КонтрольныйСимволEAN5(ЗНАЧ СимволыШтрихкода)
		
	Сумма = 0;
	Для Индекс = 1 По СтрДлина(СимволыШтрихкода) Цикл
		Если НЕ Индекс % 2 = 0 Тогда
			Сумма = Сумма + Число(Сред(СимволыШтрихкода, Индекс, 1)) * 3;
		Иначе	
			Сумма = Сумма + Число(Сред(СимволыШтрихкода, Индекс, 1)) * 9;
		КонецЕсли;
	КонецЦикла;
	
	КонтрольнаяЦифра = Сумма % 10;
	
	Возврат ?(КонтрольнаяЦифра = 10, "0", Строка(КонтрольнаяЦифра));
		
КонецФункции // КонтрольныйСимволEAN5()

// Функция - Контрольный символ код11
//
// Параметры:
//  СимволыШтрихкода - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КонтрольныйСимволКод11(ЗНАЧ СимволыШтрихкода)
	
	///1. Start with the right-most digit in the message; assign the weight starting with 1. Move from the right to left, and increment the weight by one. 
	///A dash has a value of 10.
	///2. Multiply the character value by the weight and add the result together.
	///3. Divide the total result by 11. The remainder is the “C” checksum digit.
	///4. If the length of the message is greater than 10, you have to calc the “K” digit as well.
	///5. Start with the right most digit in the message (Now it should be “C” digit). Repeat the step 1.
	///This time divide the result by 9. The remainder becomes the “K” checksum digit.
	///
	///и... непонятно, почему в генераторе https://www.free-barcode-generator.net/code-11/ по символам 1234567892 получается контрольные числа 34,
	///а здесь - 31
	///Вообщем тут борода... на гитхабе тонны такого и подобного кода. Обратите внимание на $check %= 11; При вычислении K числа:
	///
	// private function getCheckDigitC(string $code): string
	//{
	//    $p = 1;
	//    $check = 0;
	//    for ($i = (strlen($code) - 1); $i >= 0; --$i) {
	//        $digit = $code[$i];
	//        if ($digit == '-') {
	//            $dval = 10;
	//        } else {
	//            $dval = intval($digit);
	//        }
	//        $check += ($dval * $p);
	//        ++$p;
	//        if ($p > 10) {
	//            $p = 1;
	//        }
	//    }
	//    $check %= 11;
	//    if ($check == 10) {
	//        $check = '-';
	//    }

	//    return $check;
	//}

	//private function getCheckDigitK(string $code): string
	//{
	//    if (strlen($code) <= 10) {
	//        return '';
	//    }

	//    $p = 1;
	//    $check = 0;
	//    for ($i = strlen($code); $i >= 0; --$i) {
	//        $digit = $code[$i];
	//        if ($digit == '-') {
	//            $dval = 10;
	//        } else {
	//            $dval = intval($digit);
	//        }
	//        $check += ($dval * $p);
	//        ++$p;
	//        if ($p > 9) {
	//            $p = 1;
	//        }
	//    }
	//    $check %= 11;

	//    return $check;
	//}
	Результат = Неопределено;
	ЧислоС = 0;
	ЧислоК = 0;
	Индекс = 0;
	ДлинаСтроки = СтрДлина(СимволыШтрихкода);
	
	Для Итератор = -(ДлинаСтроки) По -1 Цикл
		Индекс = Индекс + 1;
		Если Результат = Неопределено Тогда	
			ЧислоС = ЧислоС + ?(Сред(СимволыШтрихкода, -(Итератор), 1)="-", 10, Число(Сред(СимволыШтрихкода, -(Итератор), 1)))*Индекс;
			Если Итератор = -1 Тогда
				ЧислоС = ?(ЧислоС=0, 0, ЧислоС % 11);
				Если ЧислоС = 10 Тогда 
					ЧислоС = "-";	
				КонецЕсли;
				СимволыШтрихкода = СимволыШтрихкода + Формат(ЧислоС, "ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0");
				Результат = Формат(ЧислоС, "ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0");
				Если СтрДлина(СимволыШтрихкода) > 10 Тогда 
					Итератор = -(СтрДлина(СимволыШтрихкода)+1);
					Индекс = 0;	
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЧислоК = ЧислоК + ?(Сред(СимволыШтрихкода, -(Итератор), 1)="-", 10, Число(Сред(СимволыШтрихкода, -(Итератор), 1)))*Индекс;
			Если Итератор = -1 Тогда
				ЧислоК = ?(ЧислоК=0, 0, ЧислоК % 9);
				Если ЧислоК = 10 Тогда 
					ЧислоК = "-";	
				КонецЕсли;
				СимволыШтрихкода = СимволыШтрихкода + Формат(ЧислоК, "ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0");
				Результат = Формат(ЧислоС, "ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0") + Формат(ЧислоК, "ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

// Функция - Алгоритм луна
//
// Параметры:
//  СимволыШтрихкода - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция АлгоритмЛуна(ЗНАЧ СимволыШтрихкода)
	
	СимволыШтрихкода = СимволыШтрихкода + "0";
	Четн   = 0;
	Нечетн = 0;
	Для Итератор = -(СтрДлина(СимволыШтрихкода)) По -1 Цикл
		Нечетн = Нечетн + Число(Сред(СимволыШтрихкода, -(Итератор), 1));
		Если Итератор = -1 Тогда
			ЧетнПредв = 0;	
		Иначе	
			ЧетнПредв = ?(Число(Сред(СимволыШтрихкода, -(Итератор+1), 1))*2 > 9, Число(Сред(Строка(Число(Сред(СимволыШтрихкода, -(Итератор+1), 1))*2), 1, 1)) 
				+ Число(Сред(Строка(Число(Сред(СимволыШтрихкода, -(Итератор+1), 1))*2), 2, 1)), Число(Сред(СимволыШтрихкода, -(Итератор+1), 1))*2);
		КонецЕсли;
		Четн = Четн + ЧетнПредв;
		Итератор = Итератор + 1;
	КонецЦикла;
	
	КонтрольнаяЦифра = Четн + Нечетн;
	
	Возврат (КонтрольнаяЦифра*9)%10;
	
КонецФункции // АлгоритмЛуна()

// Функция - Кодировка числа PHARMACODE
//
// Параметры:
//  ЧислоШтрихкода	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КодировкаЧислаPHARMACODE(ЗНАЧ ЧислоШтрихкода)
	
	ЧислоШтрихкода = ЧислоШтрихкода + 1;
	Делимое = ЧислоШтрихкода;
	БинарнаяСтрока = "";
	
	Пока Делимое >= 1 Цикл
		ЦелаяЧасть = Делимое/2;
		Остаток = Делимое%2;
		БинарнаяСтрока = Строка(Остаток) + БинарнаяСтрока;
		Если ЦелаяЧасть >= 1 Тогда
			Делимое = Окр(ЦелаяЧасть, 0, РежимОкругления.Окр15как10);
		Иначе
			Делимое = ЦелаяЧасть;
		КонецЕсли;
	КонецЦикла;

	Возврат ?(Сред(БинарнаяСтрока, 1, 1) = "1", Сред(БинарнаяСтрока, 2, СтрДлина(БинарнаяСтрока)-1), БинарнаяСтрока);
		
КонецФункции // КодировкаЧислаPHARMACODE()

// Функция - ВернутьКартуИндексовИдентификаторовGS1
//
// Параметры:
//  ПозицияНачальногоСимвола - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВернутьКартуИндексовИдентификаторовGS1(ЗНАЧ СимволыШтрихКода)
	
	Результат = Новый Соответствие;
	
	Для Инд = 1 По СтрДлина(СимволыШтрихКода) Цикл
		Если Сред(СимволыШтрихКода, Инд, 1) = Символ(202) Тогда
			Результат.Вставить(Инд - Результат.Количество(), Символ(202));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ВернутьКартуИндексовИдентификаторовGS1()

// Функция - Расширенная проверка кода EAN128
//
// Параметры:
//  СимволыШтрихКода - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РасширеннаяПроверкаКодаEAN128(ЗНАЧ СимволыШтрихКода)
	
	Результат = Ложь;
	Ошибка = Ложь;
	
	СимволыШтрихКода = СтрЗаменить(СимволыШтрихКода, "(", "^");
	СимволыШтрихКода = СтрЗаменить(СимволыШтрихКода, ")", "^");
	МассивИдентификаторовИЗначений = СтрРазделить(СимволыШтрихКода, "^", Ложь);
	ПроверочноеСоответствие = Новый Соответствие;
	Индекс = -1;
	
	Для Каждого ЭлементМассива Из МассивИдентификаторовИЗначений Цикл 
		Индекс = Индекс + 1;
		Если Индекс % 2 = 0 Тогда
			Если ПроверочноеСоответствие[ЭлементМассива] = Неопределено Тогда 
				ВложенныйМассив = Новый Массив;
				ВложенныйМассив.Добавить(ЭлементМассива);
				ВложенныйМассив.Добавить(МассивИдентификаторовИЗначений.Получить(Индекс+1));
				ПроверочноеСоответствие.Вставить(ЭлементМассива, ВложенныйМассив);
			Иначе
				Ошибка = Истина;
				Прервать;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ Ошибка Тогда
		///Теперь тут нужно проверить регулярками по идентификаторам
		Для Каждого КлючИЗначение Из ПроверочноеСоответствие Цикл
			Если Шк_Barcode1D_СерверПовтИсп.ПолучитьКартуИдентификаторовПримененияGS1_128()[КлючИЗначение.Значение[0]] = Неопределено Тогда
				Ошибка = Истина;
				Прервать;
			Иначе
				ДанныеПоИдентификатору = СтрРазделить(Шк_Barcode1D_СерверПовтИсп.ПолучитьКартуИдентификаторовПримененияGS1_128()[КлючИЗначение.Значение[0]], "^");
				Ошибка = НЕ Шк_Barcode1D_КлиентСервер.RegExТест(КлючИЗначение.Значение[1], ДанныеПоИдентификатору[1] + "{" + ДанныеПоИдентификатору[2] + "}");
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;
	
	Если НЕ Ошибка Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РасширеннаяПроверкаКодаEAN128()
